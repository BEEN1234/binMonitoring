extends layout 
include mixins/_sensorCard 
block content   
    .banner 
        h1.aurora Aurora  
        .dropdown
            p.dropdown-inner(id="header__link") Link Sensor 
            .dropdown-content 
                ul
                    if dbUser.vSensors
                        each sensor, index in dbUser.vSensors
                            li
                                label(for="sSensor") sensorId is #{sensor.sensorId}, please add a name and click 'link': 
                                input(type="text", name="sSensor", id="linkName" + index, placeholder='Name the sensor')
                                button(onclick="dbUpdate(\"linkName" + index + "\", \"" + sensor.sensorId + "\", 'as')") link
    .sidebar 
        button.button(onclick="hiddenSidebarSensor('sidebar__remove')") Remove Sensor
        ul.sidebar__link
            if dbUser.sSensors
                each sensor, index in dbUser.sSensors
                    if sensor.sensorId
                        li.sSensor(id="sSensor" + index)
                            button.sidebar__remove(onclick="dbRemove('8dda89w7e6w5df4c','"+ sensor._id +"', 'rs'), suicide('sSensor" + index + "')") remove
                            a(href="http://localhost:3000/link/" + sensor.sensorId + "/" + sensor.name + "/ab") #{sensor.name}
    .sidebar__cont
    .body
        if dbUser.bSensors
            each bSensor, index in dbUser.bSensors
                if bSensor.sensorId
                    div.body__card.bSensor(id="bSensor"+index)
                        //- makePlotlyGraph(' + index + ', \'' + bSensor.sensorId + '\', "'+ bSensor._id +'")  
                        +sensorCard(bSensor, index)
    script(type='text/javascript' src="https://cdn.plot.ly/plotly-latest.min.js")
    script.
        const myThingo = !{JSON.stringify(parsedDbUser)};
        const newThingo = JSON.parse(myThingo);
        //- console.log(!{parsedDbUser});
        //- console.log('what the heckin heck this works' + !{parsedDbUser.bSensors});
        //- console.log('but this doesnt =========================' + myThingo);
        [].forEach.call(document.getElementsByClassName('body__card'), function(e, i){
            e.onload = makePlotlyGraph(i, newThingo.bSensors[i].sensorId, newThingo.bSensors[i]._id);
        });
        function makePlotlyGraph(i, sensorId, cardId, tf) {
            const Http = new XMLHttpRequest();
            const route='http://localhost:3000/sample/liveupdate';
            var start;
            var end;
            var url;
            if(tf){
                const startId = "start" + i;
                const endId = "end" + i;
                start = document.getElementById(startId).value;
                end = document.getElementById(endId).value;
                url = route + "/" + start + "/" + end + "/" + sensorId + "/" + cardId;
            };
            if(!tf){
                const now = new Date;
                start = now.getFullYear() + '-' + now.getMonth() + 1 + '-' + now.getDate() - 1;
                end = "now";
                url = route + "/" + start + "/" + end + "/" + sensorId + "/" + cardId;
            };
            Http.open("GET", url);  
            Http.send();
            Http.onreadystatechange=(e)=>{
                if (Http.readyState == 4 && Http.status == 200) {
                    var myDataPlotly;
                    var myDivPlotly;
                    var myDataObject;
                    var myDataArray;
                    myDataPlotly = JSON.parse(Http.response);
                    myDivPlotly = 'myDiv' + i;
                    const xRange = new Date(myDataPlotly.x[myDataPlotly.x.length-1]).getTime() - new Date(myDataPlotly.x[0]).getTime();
                    var defaultWidth = 900;
                    var width = (defaultWidth/(31*24*60*60*1000)) * xRange;
                    if(width < defaultWidth) {
                        width = defaultWidth;
                    };
                    const layout = {
                        width: width
                    };
                    myDataObject = {
                        x: myDataPlotly.x,
                        y: myDataPlotly.y,
                        mode: 'lines+markers',
                        type: 'scatter'
                    };
                    myDataArray = [myDataObject];
                    Plotly.newPlot(myDivPlotly, myDataArray, layout);
                };
            };
        };
        function dbUpdate(input, sensor, io) {
            var input= document.getElementById(input).value;
            console.log(input);
            dbRemove(input, sensor, io);
        };
        function dbRemove(input, sensor, io) {
            const Http = new XMLHttpRequest();
            Http.open("GET", "http://localhost:3000/link/" + sensor + "/"+ input +"/" + io);
            Http.send();
            Http.onreadystatechange=(e)=>{
                if(Http.readyState == 4 && Http.status == 200) {
                    if (Http.response == 'OK'){ //'OK' causes client side refresh
                        location.reload(true);
                    };
                };
            };
        };
        function suicide(elementId) {
            document.getElementById(elementId).style.display = "none";
        };
        function hiddenSidebarSensor(c){
            const thingo = document.getElementsByClassName(c);
            if(thingo[0].style.display == "none"){    
                [].forEach.call(thingo, function(e){
                    e.style.display = "block";
                });
            }
            else if(thingo[0].style.display == "block"){
                [].forEach.call(thingo, function(e){
                    e.style.display = "none";
                });
            }
            else{
                [].forEach.call(thingo, function(e){
                    e.style.display = "block";
                })};
        };
        function hide(){
            [].forEach.call(document.getElementsByClassName('sidebar__remove'), function(e){
                e.style.display = "none";
            });
        }
        
        document.getElementsByClassName('sidebar')[0].addEventListener('fadeout', hide());